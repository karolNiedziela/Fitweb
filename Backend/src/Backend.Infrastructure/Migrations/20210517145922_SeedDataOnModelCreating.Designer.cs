// <auto-generated />
using System;
using Backend.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Infrastructure.Migrations
{
    [DbContext(typeof(FitwebContext))]
    [Migration("20210517145922_SeedDataOnModelCreating")]
    partial class SeedDataOnModelCreating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Core.Entities.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaloricDemandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaloricDemandId")
                        .IsUnique()
                        .HasFilter("[CaloricDemandId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Backend.Core.Entities.AthleteDietStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DietStatId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DietStatId");

                    b.HasIndex("UserId", "DietStatId");

                    b.ToTable("AthleteDietStats");
                });

            modelBuilder.Entity("Backend.Core.Entities.AthleteExercise", b =>
                {
                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfReps")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSets")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("AthleteId", "ExerciseId");

                    b.HasIndex("DayId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("AthleteExercises");
                });

            modelBuilder.Entity("Backend.Core.Entities.AthleteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("AthleteId", "ProductId");

                    b.ToTable("AthleteProducts");
                });

            modelBuilder.Entity("Backend.Core.Entities.CaloricDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.Property<double>("TotalCalories")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CaloricDemands");
                });

            modelBuilder.Entity("Backend.Core.Entities.CategoryOfProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesOfProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Meat"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dairy_and_eggs"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fish_and_seafood"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bread"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Grain_Products"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sweets"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sugar_and_spices"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Supplements"
                        });
                });

            modelBuilder.Entity("Backend.Core.Entities.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Monday"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tuesday"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wednesday"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thursday"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Friday"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Saturday"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("Backend.Core.Entities.DietStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalCalories")
                        .HasColumnType("float");

                    b.Property<double>("TotalCarbohydrates")
                        .HasColumnType("float");

                    b.Property<double>("TotalFats")
                        .HasColumnType("float");

                    b.Property<double>("TotalProteins")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DietStats");
                });

            modelBuilder.Entity("Backend.Core.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PartOfBodyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartOfBodyId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(2975),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(3022),
                            Name = "Barbell Chest Press",
                            PartOfBodyId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4118),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4130),
                            Name = "Dumbbell Chest Press",
                            PartOfBodyId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4135),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4137),
                            Name = "Wide-Grip Chest Press",
                            PartOfBodyId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4140),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4142),
                            Name = "Push-Ups",
                            PartOfBodyId = 1
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4144),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4146),
                            Name = "Squat",
                            PartOfBodyId = 2
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4148),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4150),
                            Name = "Leg Curl",
                            PartOfBodyId = 2
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4153),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4155),
                            Name = "Leg Extension",
                            PartOfBodyId = 2
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4157),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4159),
                            Name = "Standinag Dumbbell Curl",
                            PartOfBodyId = 3
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4162),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4164),
                            Name = "Hammer Curl",
                            PartOfBodyId = 3
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4166),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4168),
                            Name = "Close-Grip Bench Press",
                            PartOfBodyId = 4
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4170),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(4172),
                            Name = "Cable Rope Triceps Pushdown",
                            PartOfBodyId = 4
                        });
                });

            modelBuilder.Entity("Backend.Core.Entities.PartOfBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartOfBodies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Legs"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Abdominals"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Forearm"
                        });
                });

            modelBuilder.Entity("Backend.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<int>("CategoryOfProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryOfProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calories = 95.0,
                            Carbohydrates = 23.5,
                            CategoryOfProductId = 2,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(9527),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 475, DateTimeKind.Local).AddTicks(9545),
                            Fats = 0.29999999999999999,
                            Name = "Banana",
                            Proteins = 0.29999999999999999
                        },
                        new
                        {
                            Id = 2,
                            Calories = 46.0,
                            Carbohydrates = 11.9,
                            CategoryOfProductId = 2,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1601),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1613),
                            Fats = 0.20000000000000001,
                            Name = "Peach",
                            Proteins = 1.0
                        },
                        new
                        {
                            Id = 3,
                            Calories = 54.0,
                            Carbohydrates = 13.6,
                            CategoryOfProductId = 2,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1617),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1619),
                            Fats = 0.20000000000000001,
                            Name = "Pineapple",
                            Proteins = 0.40000000000000002
                        },
                        new
                        {
                            Id = 4,
                            Calories = 36.0,
                            Carbohydrates = 12.1,
                            CategoryOfProductId = 2,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1622),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1624),
                            Fats = 0.40000000000000002,
                            Name = "Apple",
                            Proteins = 0.40000000000000002
                        },
                        new
                        {
                            Id = 5,
                            Calories = 99.0,
                            Carbohydrates = 0.0,
                            CategoryOfProductId = 1,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1627),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1629),
                            Fats = 1.3,
                            Name = "Chicken breast without skin",
                            Proteins = 21.5
                        },
                        new
                        {
                            Id = 6,
                            Calories = 106.0,
                            Carbohydrates = 0.0,
                            CategoryOfProductId = 1,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1632),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1634),
                            Fats = 2.7999999999999998,
                            Name = "Veal shoulder",
                            Proteins = 19.899999999999999
                        },
                        new
                        {
                            Id = 7,
                            Calories = 321.0,
                            Carbohydrates = 0.0,
                            CategoryOfProductId = 1,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1636),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1638),
                            Fats = 29.300000000000001,
                            Name = "Pork ribs",
                            Proteins = 15.199999999999999
                        },
                        new
                        {
                            Id = 8,
                            Calories = 77.0,
                            Carbohydrates = 18.300000000000001,
                            CategoryOfProductId = 3,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1641),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1643),
                            Fats = 0.10000000000000001,
                            Name = "Potatoes",
                            Proteins = 1.8999999999999999
                        },
                        new
                        {
                            Id = 9,
                            Calories = 27.0,
                            Carbohydrates = 8.6999999999999993,
                            CategoryOfProductId = 3,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1646),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1648),
                            Fats = 0.20000000000000001,
                            Name = "Carrot",
                            Proteins = 1.0
                        },
                        new
                        {
                            Id = 10,
                            Calories = 14.0,
                            Carbohydrates = 2.8999999999999999,
                            CategoryOfProductId = 3,
                            DateCreated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1651),
                            DateUpdated = new DateTime(2021, 5, 17, 16, 59, 22, 476, DateTimeKind.Local).AddTicks(1653),
                            Fats = 0.20000000000000001,
                            Name = "Lettuce",
                            Proteins = 1.3999999999999999
                        });
                });

            modelBuilder.Entity("Backend.Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Backend.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "dbo");
                });

            modelBuilder.Entity("Backend.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalLoginProvider")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("Backend.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Backend.Core.Entities.Athlete", b =>
                {
                    b.HasOne("Backend.Core.Entities.CaloricDemand", "CaloricDemand")
                        .WithOne("Athlete")
                        .HasForeignKey("Backend.Core.Entities.Athlete", "CaloricDemandId");

                    b.HasOne("Backend.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaloricDemand");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Core.Entities.AthleteDietStats", b =>
                {
                    b.HasOne("Backend.Core.Entities.DietStat", "DietStat")
                        .WithMany()
                        .HasForeignKey("DietStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Core.Entities.Athlete", "Athlete")
                        .WithMany("AthleteDietStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("DietStat");
                });

            modelBuilder.Entity("Backend.Core.Entities.AthleteExercise", b =>
                {
                    b.HasOne("Backend.Core.Entities.Athlete", "Athlete")
                        .WithMany("AthleteExercises")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Core.Entities.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Core.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Day");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Backend.Core.Entities.AthleteProduct", b =>
                {
                    b.HasOne("Backend.Core.Entities.Athlete", "Athlete")
                        .WithMany("AthleteProducts")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Core.Entities.Exercise", b =>
                {
                    b.HasOne("Backend.Core.Entities.PartOfBody", "PartOfBody")
                        .WithMany()
                        .HasForeignKey("PartOfBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartOfBody");
                });

            modelBuilder.Entity("Backend.Core.Entities.Product", b =>
                {
                    b.HasOne("Backend.Core.Entities.CategoryOfProduct", "CategoryOfProduct")
                        .WithMany()
                        .HasForeignKey("CategoryOfProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryOfProduct");
                });

            modelBuilder.Entity("Backend.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Backend.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Backend.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Backend.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Backend.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Backend.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Core.Entities.Athlete", b =>
                {
                    b.Navigation("AthleteDietStats");

                    b.Navigation("AthleteExercises");

                    b.Navigation("AthleteProducts");
                });

            modelBuilder.Entity("Backend.Core.Entities.CaloricDemand", b =>
                {
                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("Backend.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Backend.Core.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
